// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// lsrm_min_cpp
Rcpp::List lsrm_min_cpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double pr_sd_z, const double pr_mean_w, const double pr_sd_w, bool option, const int cores);
RcppExport SEXP _lsrm_lsrm_min_cpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP pr_sd_zSEXP, SEXP pr_mean_wSEXP, SEXP pr_sd_wSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_z(pr_sd_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_w(pr_sd_wSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(lsrm_min_cpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, pr_sd_z, pr_mean_w, pr_sd_w, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// lsrm_ms_cpp
Rcpp::List lsrm_ms_cpp(arma::cube data, arma::vec nsample, arma::vec nitem, const int ndim, const int nset, const int nsamp_max, const int nitem_max, const int ntotal_max, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double pr_sd_z, const double pr_mean_w, const double pr_sd_w, const double pr_z_times, bool option, const int cores);
RcppExport SEXP _lsrm_lsrm_ms_cpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP nsetSEXP, SEXP nsamp_maxSEXP, SEXP nitem_maxSEXP, SEXP ntotal_maxSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP pr_sd_zSEXP, SEXP pr_mean_wSEXP, SEXP pr_sd_wSEXP, SEXP pr_z_timesSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type nset(nsetSEXP);
    Rcpp::traits::input_parameter< const int >::type nsamp_max(nsamp_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem_max(nitem_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type ntotal_max(ntotal_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_z(pr_sd_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_w(pr_sd_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_z_times(pr_z_timesSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(lsrm_ms_cpp(data, nsample, nitem, ndim, nset, nsamp_max, nitem_max, ntotal_max, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, pr_sd_z, pr_mean_w, pr_sd_w, pr_z_times, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// lsrm_ms_eq_cpp
Rcpp::List lsrm_ms_eq_cpp(arma::cube data, arma::vec nsample, arma::vec nitem, const int ndim, const int nset, const int nsamp_max, const int nitem_max, const int ntotal_max, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double pr_sd_z, const double pr_mean_w, const double pr_sd_w, const double pr_z_times, bool option, const int cores);
RcppExport SEXP _lsrm_lsrm_ms_eq_cpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP nsetSEXP, SEXP nsamp_maxSEXP, SEXP nitem_maxSEXP, SEXP ntotal_maxSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP pr_sd_zSEXP, SEXP pr_mean_wSEXP, SEXP pr_sd_wSEXP, SEXP pr_z_timesSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type nset(nsetSEXP);
    Rcpp::traits::input_parameter< const int >::type nsamp_max(nsamp_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem_max(nitem_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type ntotal_max(ntotal_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_z(pr_sd_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_w(pr_sd_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_z_times(pr_z_timesSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(lsrm_ms_eq_cpp(data, nsample, nitem, ndim, nset, nsamp_max, nitem_max, ntotal_max, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, pr_sd_z, pr_mean_w, pr_sd_w, pr_z_times, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// lsrm_norm_cpp
Rcpp::List lsrm_norm_cpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double pr_sd_z, const double pr_mean_w, const double pr_sd_w, const double pr_z_times, bool option, const int cores);
RcppExport SEXP _lsrm_lsrm_norm_cpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP pr_sd_zSEXP, SEXP pr_mean_wSEXP, SEXP pr_sd_wSEXP, SEXP pr_z_timesSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_z(pr_sd_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_w(pr_sd_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_z_times(pr_z_timesSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(lsrm_norm_cpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, pr_sd_z, pr_mean_w, pr_sd_w, pr_z_times, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// lsrm_norm_eq_cpp
Rcpp::List lsrm_norm_eq_cpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double pr_sd_z, const double pr_mean_w, const double pr_sd_w, bool option, const int cores);
RcppExport SEXP _lsrm_lsrm_norm_eq_cpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP pr_sd_zSEXP, SEXP pr_mean_wSEXP, SEXP pr_sd_wSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_z(pr_sd_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_w(pr_sd_wSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(lsrm_norm_eq_cpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, pr_sd_z, pr_mean_w, pr_sd_w, option, cores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lsrm_lsrm_min_cpp", (DL_FUNC) &_lsrm_lsrm_min_cpp, 22},
    {"_lsrm_lsrm_ms_cpp", (DL_FUNC) &_lsrm_lsrm_ms_cpp, 27},
    {"_lsrm_lsrm_ms_eq_cpp", (DL_FUNC) &_lsrm_lsrm_ms_eq_cpp, 27},
    {"_lsrm_lsrm_norm_cpp", (DL_FUNC) &_lsrm_lsrm_norm_cpp, 23},
    {"_lsrm_lsrm_norm_eq_cpp", (DL_FUNC) &_lsrm_lsrm_norm_eq_cpp, 22},
    {NULL, NULL, 0}
};

RcppExport void R_init_lsrm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
